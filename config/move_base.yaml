# ============ Global Costmap (katamaran tuned) ============
global_costmap:
  global_frame: odom          # change to map if using global localization (AMCL/SLAM)
  robot_base_frame: base_link
  update_frequency: 2.0       # global planning doesn't need to be as frequent
  publish_frequency: 1.0
  static_map: false
  rolling_window: true

  # reasonable extents for a marine environment (tweak to mission)
  width: 500.0
  height: 500.0
  resolution: 0.5
  transform_tolerance: 1.0    # be tolerant of TF/odom jitter, but not huge

  plugins:
    - {name: obstacle_layer,   type: "costmap_2d::ObstacleLayer"}
    - {name: inflation_layer,  type: "costmap_2d::InflationLayer"}

  obstacle_layer:
    observation_sources: laser_scan_sensor
    laser_scan_sensor:
      sensor_frame: laser
      data_type: LaserScan
      topic: /scan_filtered
      marking: true
      clearing: true
      max_obstacle_height: 2.5
      min_obstacle_height: 0.0
      obstacle_range: 12.0     # <= lidar range_max
      raytrace_range: 12.0

  inflation_layer:
    inflation_radius: 1.5     # larger to account for drift & stopping margin
    cost_scaling_factor: 4.0

# ============ Local Costmap (katamaran tuned) ============
local_costmap:
  global_frame: odom
  robot_base_frame: base_link
  # local must update near sensor rate (your lidar ~7-8Hz)
  update_frequency: 10.0
  publish_frequency: 6.0
  static_map: false
  rolling_window: true
  width: 12.0                 # larger local window helps when drifting
  height: 12.0
  resolution: 0.1
  transform_tolerance: 1.0

  plugins:
    - {name: obstacle_layer,   type: "costmap_2d::ObstacleLayer"}
    - {name: inflation_layer,  type: "costmap_2d::InflationLayer"}

  obstacle_layer:
    observation_sources: laser_scan_sensor
    laser_scan_sensor:
      sensor_frame: laser
      data_type: LaserScan
      topic: /scan_filtered
      marking: true
      clearing: true
      max_obstacle_height: 2.5
      min_obstacle_height: 0.0
      obstacle_range: 12.0
      raytrace_range: 12.0

  inflation_layer:
    inflation_radius: 1.5
    cost_scaling_factor: 6.0

# ============ DWA Planner (katamaran tuned) ============
DWAPlannerROS:
  # Accept larger goal tolerance on water (drift & currents)
  xy_goal_tolerance:      1.0    # try 0.5â€“1.5 depending on mission
  yaw_goal_tolerance:     0.5    # orientation less-critical; larger allowed
  latch_xy_goal_tolerance: true

  # stopped thresholds (must be small but consider sensor noise)
  trans_stopped_vel:      0.03   # if below ~3 cm/s considered stopped
  rot_stopped_vel:        0.05   # rad/s
  stop_time_buffer:       0.8    # allow time to actually stop/signal settle

  # dynamics - make them conservative for heavy boat
  acc_lim_x:          0.02    # very slow acceleration
  acc_lim_theta:      0.08
  max_vel_x:          0.4     # set to your measured safe forward speed (m/s)
  max_vel_theta:      0.4

  # objective tuning: keep reasonable bias to follow path but respect obstacles
  path_distance_bias: 12.0
  goal_distance_bias: 25.0
  occdist_scale:      0.25    # higher than wheeled robot to avoid collisions

  oscillation_timeout:    12.0    # boat may oscillate while correcting drift; allow more time
  oscillation_distance:   0.5
