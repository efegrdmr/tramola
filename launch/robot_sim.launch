<launch>
    <node pkg="tramola" type="serial_sim.sh" name="socat_node" output="screen"/>
    <node pkg="tramola" type="gcs_gui.py" name="gcs_gui_node" output="screen">
      <param name="port" value="/tmp/port1" />
    </node>
    <include file="$(find tramola)/launch/dummy_mavros.launch" />
    <node pkg="tramola" type="control.py" name="control_node" output="screen">
      <param name="port" value="/tmp/port2" />
    </node>

    <!-- =================================================================== -->
    <!-- Part 1: Your Existing Localization System                         -->
    <!-- =================================================================== -->
    <!-- This launches your existing EKF and navsat_transform_node setup -->
    <include file="$(find tramola)/launch/localization.launch" />
    <param name="/use_sim_time" value="true" />


    <!-- This static transform for the lidar is correct and necessary -->
    <node pkg="tf" type="static_transform_publisher" name="lidar_to_base"
        args="0.5 0 1.5 0 0 0 base_link lidar_link 100" />


    <!-- =================================================================== -->
    <!-- Part 3: move_base Node (Configured to use your LIDAR)               -->
    <!-- =================================================================== -->
    <!-- move_base with embedded costmap & DWA params -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
      <remap from="cmd_vel" to="/mavros/setpoint_velocity/cmd_vel_unstamped" />
      <rosparam>
        # Goal Tolerance Parameters
        # Defines how close the robot must be to the goal to succeed.
        # Values are in meters and radians.


        # You could add other general move_base parameters here too,
        # for example:
        # controller_frequency: 10.0
        # planner_patience: 5.0
    </rosparam>


      <!-- ============ Global Costmap (in ODOM frame) ============ -->
      <rosparam ns="global_costmap">
        # Using odom frame with empty map and lidar data
        global_frame: odom
        robot_base_frame: base_link
        update_frequency: 5.0
        publish_frequency: 2.0
        static_map: false
        rolling_window: true
        width: 300.0  # Reduced from 300m but kept large enough for planning
        height: 300.0 # Reduced from 300m but kept large enough for planning
        resolution: 0.5

        plugins:
          - {name: obstacle_layer,   type: "costmap_2d::ObstacleLayer"}
          - {name: inflation_layer,  type: "costmap_2d::InflationLayer"}

        obstacle_layer:
          observation_sources: laser_scan_sensor
          laser_scan_sensor:
            sensor_frame: lidar_link
            data_type: LaserScan
            topic: /scan_scaled
            marking: true
            clearing: true
            max_obstacle_height: 2.0
            min_obstacle_height: 0.0
            obstacle_range: 9.0      # Maximum range to mark obstacles
            raytrace_range: 10.0      # Range to clear obstacles

        inflation_layer:
          inflation_radius: 1.2      # Slightly increased for better safety
          cost_scaling_factor: 5.0   # Controls inflation decay rate
      </rosparam>

      <!-- ============ Local Costmap (in ODOM frame) ============ -->
      <rosparam ns="local_costmap">
        global_frame: odom
        robot_base_frame: base_link
        update_frequency: 10.0
        publish_frequency: 5.0
        static_map: false
        rolling_window: true
        width: 15.0
        height: 15.0
        resolution: 0.1  # Finer resolution for local planning

        plugins:
          - {name: obstacle_layer,   type: "costmap_2d::ObstacleLayer"}
          - {name: inflation_layer,  type: "costmap_2d::InflationLayer"}

        obstacle_layer:
          observation_sources: laser_scan_sensor
          laser_scan_sensor:
            sensor_frame: lidar_link
            data_type: LaserScan
            topic: /scan_scaled
            marking: true
            clearing: true
            max_obstacle_height: 2.0
            min_obstacle_height: 0.0
            obstacle_range: 9.0
            raytrace_range: 10.0

        inflation_layer:
          inflation_radius: 1.0
          cost_scaling_factor: 10.0  # Faster decay for local planning
      </rosparam>

      <!-- ============ DWA Planner ============ -->
      <rosparam>
        DWAPlannerROS:
          # Tight, latched tolerances
          xy_goal_tolerance:      2.0
          yaw_goal_tolerance:     3.14
          latch_xy_goal_tolerance: true

          trans_stopped_vel:      10.0
          rot_stopped_vel:        10.0
          stop_time_buffer:       0.0

          acc_lim_x:          0.1
          acc_lim_theta:      0.5
          max_vel_x:          0.3
          max_vel_theta:      0.5
          path_distance_bias: 20.0
          goal_distance_bias: 30.0
          occdist_scale:      0.1
          oscillation_timeout:    3.0
          oscillation_distance:   0.20
        </rosparam>
    </node>

  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find tramola)/rviz/navigation.rviz" />
  <node pkg="tramola" type="scale_scan.py" name="laser_scan_scaler" output="screen">
    <param name="scale_factor" value="0.5"/>
  </node>
  <node pkg="tramola" type="cmd_vel_to_thrusters.py"
        name="cmd_vel_to_thrusters" output="screen">
    <param name="wheel_separation" value="1.2" />
</node>
</launch>