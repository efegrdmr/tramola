<?xml version="1.0"?>
<launch>
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf"/>
  <!-- Gazebo world to load -->
  <arg name="world" default="$(find vrx_gazebo)/worlds/example_course.world" />
  <!-- If true, run gazebo GUI -->
  <arg name="gui" default="false" />
  <!-- If true, run gazebo in verbose mode -->
  <arg name="verbose" default="true"/>
  <!-- Set various other gazebo arguments-->
  <arg name="extra_gazebo_args" default=""/>
  <!-- Start in a default namespace -->
  <arg name="namespace" default="wamv"/>
  <!-- Do we lock the vessel to the world? -->
  <arg name="wamv_locked" default="false" />
  <!-- Start paused? -->
  <arg name="paused" default="false"/>


  <!-- Initial USV location and attitude-->
  <arg name="x" default="-532" />
  <arg name="y" default="162" />
  <arg name="z" default="0.1" />
  <arg name="P" default="0" />
  <arg name="R" default="0" />
  <arg name="Y" default="1" />

  <!-- Allow user specified thruster configurations
       H = stern trusters on each hull
       T = H with a lateral thruster
       X = "holonomic" configuration -->
  <arg name="thrust_config" default="T" />

  <!-- Do we load the VRX sensor suite? -->
  <arg name="vrx_sensors_enabled" default="true" />
  
  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">
  <param name="target_frame" value="lidar_link"/>
  <param name="transform_tolerance" value="0.01"/>
  <param name="min_height" value="-3"/>
  <param name="max_height" value="5.0"/>
  <param name="angle_min" value="-1.5708"/>
  <param name="angle_max" value="1.5708"/>
  <param name="angle_increment" value="0.0058"/>
  <param name="scan_time" value="0.1"/>
  <param name="range_min" value="0.01"/>
  <param name="range_max" value="20.0"/>
  <remap from="cloud_in" to="/wamv/sensors/lidars/lidar_wamv/points"/>
  <remap from="scan" to="/scan"/>
</node>

  <!-- Start Gazebo with the world file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"   value="$(arg world)"/>
    <arg name="verbose"      value="$(arg verbose)"/>
    <arg name="paused"       value="$(arg paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui"          value="$(arg gui)" />
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
  </include>
  

<node name="gazebo_physics_tuner" pkg="rosservice" type="rosservice"
      args="call --wait /gazebo/set_physics_properties '{time_step: 0.01, max_update_rate: 100.0, gravity: {x: 0.0, y: 0.0, z: -9.8}, ode_config: {sor_pgs_precon_iters: 0, sor_pgs_iters: 50, sor_pgs_w: 1.3, sor_pgs_rms_error_tol: 0.0, contact_surface_layer: 0.001, contact_max_correcting_vel: 100.0, cfm: 0.0, erp: 0.2, max_contacts: 20}}'"
      />


  <!-- Load robot model -->
  <!-- Determine which model -->
  <arg name="h_config" value="$(eval int((thrust_config)=='H'))"/>
  <arg name="t_config" value="$(eval int((thrust_config)=='T'))"/>
  <arg name="x_config" value="$(eval int((thrust_config)=='X'))"/>

  <!-- For now - can only use the T configuration! -->
  <arg if="$(arg t_config)" name="urdf" default="$(find tramola)/urdf/wamv_gazebo.urdf.xacro"/>

  <param name="$(arg namespace)/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(find tramola)/urdf/wamv_gazebo.urdf.xacro'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=$(arg namespace) "/>

  <!-- Spawn model in Gazebo -->
  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              -urdf -param $(arg namespace)/robot_description -model wamv"/>



</launch>